[HttpGet]
        [Authorize(Roles = "Admin")]
        public ActionResult _UserList(string sortOrder, string currentFilter, string searchString, int? page)
        {
            ViewBag.CurrentSort = sortOrder;
            ViewBag.LNameSortParm = String.IsNullOrEmpty(sortOrder) ? "lname_desc" : "";
            ViewBag.FNameSortParm = String.IsNullOrEmpty(sortOrder) ? "fname_desc" : "";
            ViewBag.UNameSortParm = String.IsNullOrEmpty(sortOrder) ? "uname_desc" : "";
            ViewBag.RoleSortParm = String.IsNullOrEmpty(sortOrder) ? "role_desc" : "";

            if (searchString != null)
            {
                page = 1;
            }
            else
            {
                searchString = currentFilter;
            }

            ViewBag.CurrentFilter = searchString;

            var users = from s in db.Users
                        select s;
            if (!String.IsNullOrEmpty(searchString))
            {
                users = users.Where(s => s.LastName.Contains(searchString)
                                       || s.UserName.Contains(searchString) 
                                       || s.FirstName.Contains(searchString));
            }
            switch (sortOrder)
            {
                case "lname_desc":
                    users = users.OrderByDescending(s => s.LastName);
                    break;
                case "uname_desc":
                    users = users.OrderByDescending(s => s.UserName);
                    break;
                case "fname_desc":
                    users = users.OrderByDescending(s => s.FirstName);
                    break;
                case "role_desc":
                    users = users.OrderByDescending(s => s.FirstName);
                    break;
                case "uname_asc":
                    users = users.OrderBy(s => s.UserName);
                    break;
                case "fname_asc":
                    users = users.OrderBy(s => s.FirstName);
                    break;
                case "role_asc":
                    users = users.OrderBy(s => s.Roles);
                    break;
                default:     
                    users = users.OrderBy(s => s.LastName);
                    break;
            }
            int pageSize = 5;  //Number of users displayed at a time
            int pageNumber = (page ?? 1);
            return PartialView(users.ToPagedList(pageNumber, pageSize));
        }

        //Display Users/Index view if logged in user is Admin
        [HttpGet]
        public ActionResult UserProfile()
        {
            var model = db.Users.ToList();
            return View("UserProfile", model);
        }

        [HttpGet]
        public ActionResult _UserProfile(string sortOrder, string currentFilter, string searchString, int? page)
        {
            ViewBag.CurrentSort = sortOrder;
            ViewBag.LNameSortParm = String.IsNullOrEmpty(sortOrder) ? "lname_desc" : "";
            ViewBag.FNameSortParm = String.IsNullOrEmpty(sortOrder) ? "fname_desc" : "";
            ViewBag.UNameSortParm = String.IsNullOrEmpty(sortOrder) ? "uname_desc" : "";
            ViewBag.RoleSortParm = String.IsNullOrEmpty(sortOrder) ? "role_desc" : "";

            if (searchString != null)
            {
                page = 1;
            }
            else
            {
                searchString = currentFilter;
            }

            ViewBag.CurrentFilter = searchString;

            var users = from s in db.Users
                        select s;
            if (!String.IsNullOrEmpty(searchString))
            {
                users = users.Where(s => s.LastName.Contains(searchString)
                                       || s.UserName.Contains(searchString)
                                       || s.FirstName.Contains(searchString));
            }
            switch (sortOrder)
            {
                case "lname_desc":
                    users = users.OrderByDescending(s => s.LastName);
                    break;
                case "uname_desc":
                    users = users.OrderByDescending(s => s.UserName);
                    break;
                case "fname_desc":
                    users = users.OrderByDescending(s => s.FirstName);
                    break;
                case "role_desc":
                    users = users.OrderByDescending(s => s.FirstName);
                    break;
                case "uname_asc":
                    users = users.OrderBy(s => s.UserName);
                    break;
                case "fname_asc":
                    users = users.OrderBy(s => s.FirstName);
                    break;
                case "role_asc":
                    users = users.OrderBy(s => s.Roles);
                    break;
                default:
                    users = users.OrderBy(s => s.LastName);
                    break;
            }
            int pageSize = 5;  //Number of users displayed at a time
            int pageNumber = (page ?? 1);
            return PartialView(users.ToPagedList(pageNumber, pageSize));
        }

        [HttpGet]
        [Authorize(Roles = "Admin")]
        public ActionResult AllUserProfile()
        {
            var model = db.Users.ToList();
            return View("AllUserProfile", model);